{"name":"Qed","tagline":"Quandora markdown editor","body":"# qed\r\n\r\n> Quandora markdown editor\r\n\r\nThe editor aim is to provide an easy to use markdown editor for both developers and regular users. It still remains a code source editor but it tries to give an apercu of the final HTML rendering while typing. For more demanding users there is also a live HTML preview available with scroll synchronization. \r\n\r\nIts primary goal is to write comments or small / medium documents. It is not especially designed to deal with large markdown documents.\r\n\r\nThe editor is implemented in pure javascript and it is based on the [Content Editable](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_Editable) browsers capability. \r\n\r\n**Here is a [Live Editor Demo](http://quandora.github.io/qed/demo.html) that will open this Readme file in full size mode**.\r\n\r\n## Live Examples\r\n\r\n1. [Readme Page Demo](http://quandora.github.io/qed/demo.html). See this README page in the editor.\r\nThe default toolbar theme and actions are used. The editor is opened in **full page** mode. \r\n2. [Minimal Editor Setup](http://quandora.github.io/qed/example1.html).\r\nThe minimal code required to instantiated an editor on an existing textarea.\r\n3. [Custom Action](http://quandora.github.io/qed/example2.html).\r\nImplementing a custom action (the PING/PONG action from above). The Toolbar is using the default style.\r\n4. [Custom Action and Custom Toolbar Theme](http://quandora.github.io/qed/example3.html).\r\nImplementing a custom action (the PING/PONG action from above). The Toolbar is using a \"blue\" theme.\r\n5. [Suggest Feature](http://quandora.github.io/qed/example4.html).\r\nProviding a suggest implementation to suggest country names. Just type `@` followed by a country name to see suggestions popping up.\r\n\r\n## Features\r\n* Markdown syntax highlighting and HTML apercu or hints when possible.\r\n* Markdown syntax autocompletion.\r\n* Live preview (requires marked.js dependency)\r\n* Native spellcheck (uses the browser *content editable* capability).\r\n* Copy / Paste and customizable drag / drop. \r\n* HTML pasted content is converted to markdown (not supported on IE where the HTML is pasted as plain text).\r\n* Fully configurable suggest / autocompletion support.\r\n* Extensibility through custom actions.\r\n* Minimal mode for inline editing (with no toolbar).\r\n* Editor mode with a customizable toolbar (you can remove or add custom actions as you want).\r\n* Full Page mode - maximize to the size of the browser client area.\r\n* Customizable stylesheet for both toolbar and editor content.\r\n\r\n**To be implemented**:\r\n* Automatic reference-style management: keep link definitions and references in sync.\r\nThis will make possible to insert *human friendly* links by inserting link references and automatically manage the link definitions.\r\n\r\n## Dependencies\r\n\r\nThere are no dependencies for the core part of the editor. \r\nOnly two optional dependencies are needed when using the preview and live preview feature:\r\n\r\n* [marked.js](https://github.com/chjj/marked) - a Markdown parser which is needed to generate the HTML preview (only needed when using the preview feature)\r\n* [MutationObserver.js](https://github.com/polymer/MutationObservers) - A Mutation Observers Polyfill which is needed for the live preview feature on IE9\r\n\r\n## Requirements:\r\nAny *evergreen* browser (i.e. Chrome, Safari, Firefox, IE10+). To work in IE 9 it requires the `MutationObserver.js` dependency.\r\n\r\n## Distribution files\r\n\r\nThe editor is distributed as one default css file and a javascript file that comes in 3 different flavors depending on your needs:\r\n\r\n* Default CSS file: `src/editor.css`\r\n* JS files:\r\n  * `build/qed-all.js` - include the editor code and all dependencies (marked.js and MutationObserver.js).\r\n  * `build/qed-core.js` - include the editor code and the MutationObserver.js dependency.\r\n  * `build/qed.js`- include only the editor code. No dependencies are included.\r\n  \r\nThe minified versions of these files are ending in `.min.js`.  \r\nThe `build/qed.min.js` file is about **57K** and gziped is about **15K**.\r\n\r\n**Note**: Usually when using the markdown editor you will want to use the preview too - in that case it is better to define a custom stylesheet for the preview - otherwise you will end up with the browser defaults which are not very pretty.\r\nWe have an example of such a stylesheet in `demo/preview.css` that you can use - it is not the best one - but surely better than the browser defaults.\r\n\r\n## Building \r\n\r\nTo build the editor you need [Grunt](http://gruntjs.com/). To install grunt and get started with, see http://gruntjs.com/getting-started\r\n\r\nYou need first to install the project build dependencies before running the build.  \r\nGo to the project directory and run: (you should do this only the once to locally download dependencies)\r\n\r\n```shell\r\nnpm install\r\n```\r\n\r\nThen to build simply run:\r\n\r\n```shell\r\ngrunt\r\n```\r\n\r\n## Usage\r\n\r\nTo use the editor you should include in your HTML page the editor javascript file (which one depends on your needs) and a stylesheet to configure the editor and optionally a stylesheet for the preview.  \r\nYou can use the default stylesheets from `src/editor.css` and `demo/preview.css`.  \r\nFor the example below we will use the complete qed build (containing all the dependencies): `build/qed-all.min.js`.\r\n\r\n### Including the required scripts and sylesheets\r\n\r\nFirst you need to declare the editor and the stylesheets in your page.  \r\nPut this in the page `head`:\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"path/to/editor.css\">\r\n<link rel=\"stylesheet\" href=\"path/to/preview.css\">\r\n<script type='text/javascript' src='path/to/qed-all.min.js'></script>\r\n```\r\n\r\n### Attach the editor to a `textarea` element\r\n\r\nThe simplest method to use the editor is to attach it to an existing `textarea` element:\r\n\r\nGiven a textarea input with an id of `qed-demo` you can attach an editor to it by using the following code:\r\n\r\n```javascript\r\nvar qed = Qed.create(\"#qed-demo\");\r\n```\r\n\r\nThis is the minimal code required to instantiate an editor.\r\n\r\nBy default the editor height wil grow to display the entire content.  \r\nIf you want to use a fixed height (with a scrollbar) then you must specify the height in the editor settings at creation.\r\n\r\nExample:\r\n\r\n```javascript\r\nvar qed = Qed.create(\"#qed-demo\", { height: 300 });\r\n```\r\n\r\n**Note** that by default no toolbar is displayed. See below in the \"Defining the editor toolbar\" section on how to enable the toolbar.\r\n\r\n### Editor settings.\r\n\r\nHere is a list with all the supported settings:\r\n\r\n* **height** - *integer*. Use a fixed height (the height is expressed in pixels and must be a positive integer).\r\n* **autofocus** - *boolean*. If true the editor will request the focus at creation time. The default is false.\r\n* **confirmOnLeave** - *string*. If defined a confirmation prompt will be displayed when the user is leaving the page and the editor is dirty (i.e. content was not save). The *string* value of this setting will be used as the prompt message.\r\n* **submittingClass** - *string*. The class that should be set on the containing form while the form is submited to be able to ignore the `confirmOnLeave` prompt when submitting. The default is 'submitting'. You can also set the `submitting` property on the editor container instance to achieve the same.\r\n* **fullscreen** - *boolean*. If true the editor is created in full page mode. The default is false. (You can switch later in \"fullscreen\" mode by invoking the appropiate editor action.\r\n* **leftBar** - *array*. Defined the content of the action bar which will be aligned on the left of the toolbar. The default is no toolbar. The action bar is defined as an array of action objects.\r\n* **rightBar** - *array*. Defined the content of the action bar which will be aligned on the right of the toolbar. The default is no toolbar. The action bar is defined as an array of action objects.\r\n* **suggest** - *object*. Define a suggestion implementation. No suggestion implementation is defined by default. See \"Defining Editor Suggestions\" section for more details.\r\n* **insertImage** - *function*. Define an action to insert an image. By default no insert image action is provided.\r\nThis function should open a dialog to let the user upload or choose an image from an external service and when done to insert the image code at the current caret position.\r\n* **dropFiles** - *function*. Define a drop action. The function is called on browser `drop` event with two arguments: `files` and `event` where files is `event.dataTransfer.files`. This function is responsible to modify the editor content and to upload the dropped file if needed. By default no drop logic is provided.\r\n* **previewTransforms** - *array*. Define an array of tranformation functions to apply after the preview was generated. A transformation function will be called with two arguments: `element` and `focusOnCaret` where element is the preview element anf focusOnCaret is a boolean indicating if focus synchronization is enabled or not.\r\n\r\n### Defining the editor toolbar.\r\n\r\nThe toolbar is made of two action bars. The first bar (the main one) aligned on the left and a second one is aligned on the right. The irght action bar can be used for actons like help etc.\r\n\r\nTo enable the toolbar you must define at least one action bar. To define the left action bar you must specify a `leftBar` in the editor settings and to define the right bar you must specify a `rightBar`. Both bars have the same format - an array of action objects.  \r\nAn action is an object in the following format:\r\n\r\n```javascript\r\n{name: \"the_action_id\", label: \"A label for this action\", title: \"A tooltip for the action\", exec: function(qed) {...}}\r\n```\r\n\r\nFor the toggle like actions you can define to different labels - one to be displayed when the toggle is on the other one when it is off:\r\n\r\n```javascript\r\n{name: \"the_action_id\", labelOn: \"A label for this action when toggle is ON\", labelOff: \"A label for this action when toggle is OFF\", title: \"A tooltip for the action\", exec: function(qed) {...}}\r\n```\r\n\r\nif the `the_action_id` is a built-in action then you don't need to specify an `exec` function since built-in exec function bound to that action will be used. The `exec` must be defined only when there is not a built-in execution function bound to the action ID.\r\n\r\nUsually you want to have an **icon** instead of a label. To do so you should use a HTML label which will insert a font icon. You can freely use [Font Awesome](https://fortawesome.github.io/Font-Awesome/) to do this.\r\n\r\nIn order to use **Font Awesome** font icons include this in the document head:\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\r\n```\r\n\r\nHere is an example for the built-in `bold` action by using the **bold** font icon defined by Font Awesome:\r\n\r\n```javascript\r\n{name: \"bold\", label: \"<i class='fa fa-bold'></i>\", title: \"Bold\"}\r\n```\r\n\r\nMost of the built-in actions already have shortcuts. For custom actions, to define a shortcut you must specify it in the `title` property at the end. Example:\r\n\r\n```javascript\r\n{name: \"preview\", labelOff: \"<i class='fa fa-eye'></i>\", labelOn: \"<i class='fa fa-edit'></i>\", title: 'Toggle Preview Mode (Ctrl+F)'}\r\n```\r\n\r\nThe `title`ends in (Ctrl+F) which is defining the shortcut.\r\n\r\nTo define a **separator** between two actions just use the string `\"|\"` as the action definition.\r\n\r\nHere is a complete  toolbar with all the built-in actions (this is using **Font Awesome** for the labels)\r\n\r\n```javascript\r\n...\r\nleftBar: [\r\n  {name: \"undo\", label: \"<i class='fa fa-undo'></i>\", title: \"Undo\"},\r\n  {name: \"redo\", label: \"<i class='fa fa-repeat'></i>\", title: \"Redo\"},\r\n  \"|\",        \r\n  {name: \"bold\", label: \"<i class='fa fa-bold'></i>\", title: \"Bold\"},\r\n  {name: \"italic\", label: \"<i class='fa fa-italic'></i>\", title: \"Italic\"},\r\n  {name: \"strike\", label: \"<i class='fa fa-strikethrough'></i>\", title: \"Strikethrough\", },\r\n  \"|\",\r\n  {name: \"h1\", label: \"H1\", title: \"Heading 1\"},\r\n  {name: \"h2\", label: \"H2\", title: \"Heading 2\"},\r\n  {name: \"h3\", label: \"H3\", title: \"Heading 3\"},\r\n  \"|\",\r\n  {name: \"code\", label: \"<i class='fa fa-code'></i>\", title: \"Insert Code\"},\r\n  {name: \"quote\", label: \"<i class='fa fa-quote-right'></i>\", title: \"Block Quotes\"},\r\n  \"|\",\r\n  {name: \"ul\", label: \"<i class='fa fa-list-ul'></i>\", title: \"Unordered List\"},\r\n  {name: \"ol\", label: \"<i class='fa fa-list-ol'></i>\", title: \"Ordered List\"},\r\n  \"|\",\r\n  {name: \"link\", label: \"<i class='fa fa-link'></i>\", title: \"Insert Link\"},\r\n  {name: \"image\", label: \"<i class='fa fa-picture-o'></i>\", title: \"Insert Image\"}\r\n],        \r\nrightBar: [\r\n  {name: \"help\", label: \"<i class='fa fa-support'></i>\", title: 'Markdown Cheatsheet', exec: function(container) { window.open(\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\"); }},\r\n  {name: \"preview\", labelOff: \"<i class='fa fa-eye'></i>\", labelOn: \"<i class='fa fa-edit'></i>\", title: 'Toggle Preview Mode (Ctrl+F)'},\r\n  {name: \"fullscreen\", labelOff: \"<i class='fa fa-external-link'></i>\", labelOn: \"<i class='fa fa-remove'></i>\", title:'Toggle Fullscreen Mode (Shift+Ctrl+F)'}\r\n]\r\n...\r\n```\r\n**Note** that the `image` action requires an `insertImage` fucntion to be defined in the editor settings.\r\n\r\n### Defining custom themes.\r\n\r\nYou can define your own themes using custom stylesheets. Here is an example of defining a **blue** toolbar theme for the editor toolbar:\r\n\r\n```\r\n.qed-container {\r\n    border: 1px solid #54ADE3;\r\n}\r\n.qed-toolbar {\r\n  background-color: #71BBE8;\r\n  color: white;\r\n}\r\n.qed-toolbar button {\r\n  color: white;\r\n}\r\n.qed-toolbar-item:hover {\r\n  background-color: #54ADE3;\r\n}\r\n```\r\n\r\nYou can also customize the editor content styles.\r\n\r\n### Defining Custom Actions.\r\n\r\nHere is a naive example of a custom action:\r\n\r\n```\r\n{name: \"myaction\", label: \"Ping!\", title:'Ping (Alt+Ctrl+P)', exec: function(container) { alert('Pong!'); }}\r\n```\r\n\r\nUsually we will want to modify the editor content when executing an action. Modifying the markdown content is always done through a **Range** object. Any action you want to perform on the content will require you to interact with qed Range API. \r\n\r\nTo do a more sofisticated action we will have to use this *range* object to modify the content. \r\nThe current focus range is fetched using:\r\n\r\n```javascript\r\nvar range = editor.getOrInitFocusRange();\r\n```\r\n\r\nwhere editor is the `editor instance` (and **not** the `editor container`!).\r\nWhen creating an editor using:\r\n\r\n```javascript\r\nvar qed = Qed.create(\"#qed-demo\");\r\n```\r\n\r\nthe `qed` variable will be an instance of the editor container. You can get the editor instance by using:\r\n\r\n```\r\nvar editor = qed.editor;\r\n```\r\n\r\nThe **editor container** instance manages the toolbar, the custom actions and the editor instance. The **editor** instance manage the markdown content and provide an API to modify this content.\r\n\r\nWe will modify our action to insert the 'Pong!' at the cursor position instead of displaying an alert message.\r\n\r\nOur action `exec` function is called with a `container` argument which is the editor container. We should thus retrieve the editor instance  through `container.editor` to write into the markdown document.\r\n\r\n```javascript\r\nfunction myAction(container) {\r\n  var editor = container.editor;\r\n  var range = editor.getOrInitFocusRange();\r\n  range.insertText('Pong!').select();\r\n  editor.takeSnapshot(range);\r\n}\r\n```\r\n\r\nLet's explain what we've done here:\r\n\r\n1. `editor.getOrInitFocusRange()` just return the focus (i.e. selection) range of the editor. If the editor doesn't have the focus it will request the focus (and will place the caret to the begining of the markdown document).\r\n2. `range.insertText('Pong!').select()` is inserting the text \"Pong!\" at the caret position (removing selected text if any) then will refresh the caret (through `.select()` call).\r\n3. `editor.takeSnapshot(range)` will push our changes into the **Undo/Redo** stack. If we don't call this - the **Undo manager** will ignore the changes we've made.\r\n\r\nNow that we just defined our \"more sofisticated\" action we can add it like this to the editor:\r\n\r\n```javascript\r\nvar qed = Qed.create(\"#qed-demo\", {\r\n  height: 300,\r\n  leftBar: [\r\n    {name: \"myaction\", label: \"Ping!\", title:'Ping (Alt+Ctrl+P)', exec: myAction}\r\n  ]\r\n});\r\n```\r\n\r\nIf you want to see more examples on how to use the range API just look in the sources for the built-in actions.\r\n\r\n### Accessing Editor Content.\r\n\r\nGiven the following editor container instance:\r\n\r\n```javascript\r\nvar qed = Qed.create(\"#qed-demo\");\r\n```\r\n\r\nYou can set the editor content like this:\r\n\r\n```javascript\r\nqed.setInitialText('some **markdown** initial code');\r\n```\r\n\r\nor \r\n\r\n```javascript\r\nqed.setInitialText('some **markdown** code');\r\n```\r\n\r\nThe difference between the two is that the first is not triggering the *Undo Manager* so the operation is not undoable.\r\nIt is usefull to initialize the editor content. The second form should be used to replace the editor content.\r\n\r\nTo retrieve the current markdown content from the editor you should call:\r\n\r\n```javascript\r\nvar text = qed.getText();\r\n```\r\n\r\n**Note** that when attaching the editor to a textarea element its content will be automatically injected back in the textarea on editor blur event.\r\n\r\n\r\n### Defining Editor Suggestions.\r\n\r\nTo provide a suggestion implementation you should define an object which implement the following contract:\r\n\r\n```javascript\r\n{\r\n term: function(range) { ... }\r\n fetch: function(term, callback) { ... } \r\n popupClass: 'my-suggestion-popup',\r\n delay: 300,\r\n text: function(item) { return item; },\r\n id: function(item) { return this.text; },\r\n value: function(item) { return this.text; }\r\n render: function(item) { ... }\r\n}\r\n```\r\n\r\nwhere `fetch` and `term` are mandatory. The rest of the contract can be ommited or not - depending on your suggestion logic.\r\n\r\nHere is an explanation of each field:\r\n\r\n* **term** - *required* - called after something was typed into the editor to check if a suggestion can be performed. Return null or undefined if no suggestion should be done. Otherwise it returns an array of 2 elements: [term, offset] where term is the term to lookup for suggestions and offset is the offset on the focus line where the term to replace by the suggestion begins.\r\n* **fetch** - *required* -  lookup the matching results given the term return by the term() function. The lookup result (an array of items) must be passed back to the callback argument to fill the popup with suggestions.\r\n* **popupClass** - *optional* - an additional class to be added to the suggestion popup. \r\nThe popup has already the class: `qed-suggest-popup`\r\n* **delay** - *optional* - the delay in ms after the user stopped typing before starting a fetch on the typed term. Default is 300 ms.\r\n* **text** - *optional* - a function to extract the text from the returned items. The text is displayed in the popup for each item. The default is to return the item itself (usefull when the item is a string and not an object)\r\n* **id** - *optional* - a function to extract the id from the returned items. The id is used to uniquely identify each item. The default is to use the same value as the item text.\r\n* **value** - *optional* - a function to extract the value that wull be inserted in the markdown document if the item is selected. The default is to use the same value as the item text.\r\n* **render** - *optional* - an optional function to customize the item rendering. Must return a DOM element that represent the item. The default is to use a `LI` element.\r\n\r\nHere is a simple suggestion implementation which will lookup terms in a local COUNTRIES array. To recognize that a suggestion must be performed the user must type a '@' followed by the country prefix:\r\n\r\n```javascript\r\nvar SUGGEST_IMPL = {\r\n  fetch: function(term, callback) {\r\n    var result = [];\r\n    if (term && term.charAt(0) === '@') {\r\n      term = term.substring(1).toLowerCase();\r\n      var qlen = term.length;\r\n      for (var i=0,len=COUNTRIES.length; i<len;i++) {\r\n        var city = COUNTRIES[i].toLowerCase();\r\n        if (city.length >= qlen && city.substring(0, qlen) === term) {\r\n          result.push(COUNTRIES[i]);\r\n        }\r\n      }\r\n    } else {\r\n      result = COUNTRIES;\r\n    }\r\n    callback(result);\r\n  },\r\n  // return [term, offset] (offset is the offset on the line where the term to replace by the suggestion begins)\r\n  term: function(range) {\r\n    var tagChar = '@';\r\n    if (!range.isCollapsed()) {\r\n      return null;            \r\n    }        \r\n    var text = range.focusLine.getText();\r\n    var caret = range.focusOffset;\r\n    var i = text.lastIndexOf(tagChar, caret);\r\n    if (i < 0) {\r\n      return null;\r\n    }\r\n    if (i > 0 && text.charCodeAt(i-1) > 32) {\r\n      return null;\r\n    }\r\n    var prefix = text.substring(i, caret);\r\n    if (/\\s/.test(prefix)) { // if it contains whitespaces ignore\r\n      return null;\r\n    }\r\n    //require min 1 char: prefix.length > 1\r\n    if (prefix.length === 1) return null;\r\n    return [prefix, i];\r\n  },\r\n  popupClass: 'test-popup', // the popup class\r\n};\r\n\r\n// install the editor in 'qed-demo' element\r\nvar qed = Qed.create(\"#qed-demo\", { height: 300, autofocus:true, suggest: SUGGEST_IMPL });\r\n```\r\n\r\nThe `fetch` method can also use AJAX to asynchronously fetch suggestions. When suggestions are available on the client the `callback` argument must be called with those suggestions.\r\n\r\n### More?\r\n\r\nFor more details look into the sources and in the `demo` directory.  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}